plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.shipment'
version = '0.0.1-SNAPSHOT'

java {

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.postgresql:r2dbc-postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'commons-validator:commons-validator:1.9.0'
	implementation 'org.slf4j:slf4j-api:2.0.17'
	implementation 'ch.qos.logback:logback-classic:1.5.18'
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.8.6'

	testImplementation 'org.mockito:mockito-core:5.17.0'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.12.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
	jacoco {
		destinationFile = layout.buildDirectory.file("jacoco/test.exec").get().asFile
	}
	jacocoTestReport.enabled = true
	beforeTest { descriptor ->
		logger.lifecycle("Running " + descriptor)
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.90
			}
		}
	}
}

jacocoTestReport {
	dependsOn test

	classDirectories.from = files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				'**/config/**'
		])
	})
}